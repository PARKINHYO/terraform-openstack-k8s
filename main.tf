provider "openstack" {

}

################################################################################
# network, flavor
# resource name: tf_k8s
################################################################################

resource "openstack_compute_keypair_v2" "tf_k8s" {
  name       = var.name
  public_key = file("${var.ssh_key_file}.pub")
}

resource "openstack_networking_network_v2" "tf_k8s" {
  name           = var.name
  admin_state_up = "true"
}

resource "openstack_networking_subnet_v2" "tf_k8s" {
  name            = var.name
  network_id      = openstack_networking_network_v2.tf_k8s.id
  cidr            = "10.0.0.0/24"
  ip_version      = 4
  dns_nameservers = ["8.8.8.8", "8.8.4.4"]
}

resource "openstack_networking_router_v2" "tf_k8s" {
  name                = var.name
  admin_state_up      = "true"
  external_network_id = data.openstack_networking_network_v2.tf_k8s.id
}

resource "openstack_networking_router_interface_v2" "tf_k8s" {
  router_id = openstack_networking_router_v2.tf_k8s.id
  subnet_id = openstack_networking_subnet_v2.tf_k8s.id
}

resource "openstack_compute_flavor_v2" "tf_k8s" {
  name      = "k8s-type"
  ram       = "4096"
  vcpus     = "4"
  disk      = "20"
  is_public = true
}

################################################################################
# ssecurity group
# resource name: tf_k8s, tf_k8s_portnum, tf_k8s_portname
################################################################################

resource "openstack_networking_secgroup_v2" "tf_k8s" {
  name        = var.name
  description = "Security group for the Terraform K8S Cluster"
}

resource "openstack_networking_secgroup_rule_v2" "tf_k8s_22" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 22
  port_range_max    = 22
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.tf_k8s.id
  description       = "ssh"
}

resource "openstack_networking_secgroup_rule_v2" "tf_k8s_80" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 80
  port_range_max    = 80
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.tf_k8s.id
  description       = "http"
}

resource "openstack_networking_secgroup_rule_v2" "tf_k8s_443" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 443
  port_range_max    = 443
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.tf_k8s.id
  description       = "https"
}

resource "openstack_networking_secgroup_rule_v2" "tf_k8s_8080" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 8080
  port_range_max    = 8080
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.tf_k8s.id
  description       = "http2"
}

resource "openstack_networking_secgroup_rule_v2" "tf_k8s_3000" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 3000
  port_range_max    = 3000
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.tf_k8s.id
  description       = "grafana"
}

resource "openstack_networking_secgroup_rule_v2" "tf_k8s_9090" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 9090
  port_range_max    = 9090
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.tf_k8s.id
  description       = "prometheus"
}

resource "openstack_networking_secgroup_rule_v2" "tf_k8s_icmp" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "icmp"
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.tf_k8s.id
  description       = "ping"
}

resource "openstack_networking_secgroup_rule_v2" "tf_k8s_nodeport_svc" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 30000
  port_range_max    = 32767
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.tf_k8s.id
  description       = "nodeport"
}

resource "openstack_networking_secgroup_rule_v2" "tf_k8s_internal" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  remote_ip_prefix  = "10.0.0.0/24"
  security_group_id = openstack_networking_secgroup_v2.tf_k8s.id
  description       = "openstack private subnet"
}

################################################################################
# generated by k8s_run.sh.
################################################################################

# resource "openstack_networking_secgroup_rule_v2" "tf_k8s_protocol4_public" {
#   direction         = "ingress"
#   ethertype         = "IPv4"
#   protocol          = "4"
#   remote_ip_prefix  = "172.24.4.0/24"
#   security_group_id = openstack_networking_secgroup_v2.tf_k8s.id
#   description       = "openstack public network"
# }

# resource "openstack_networking_secgroup_rule_v2" "tf_k8s_protocol4_private" {
#   direction         = "ingress"
#   ethertype         = "IPv4"
#   protocol          = "4"
#   remote_ip_prefix  = "10.0.0.0/22"
#   security_group_id = openstack_networking_secgroup_v2.tf_k8s.id
#   description       = "openstack private network"
# }

resource "openstack_networking_secgroup_rule_v2" "tf_k8s_cert_manager_10250" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 10250
  port_range_max    = 10250
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.tf_k8s.id
  description       = "cert manager in k8s"
}

resource "openstack_networking_secgroup_rule_v2" "tf_k8s_cert_manager_6080" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 6080
  port_range_max    = 6080
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.tf_k8s.id
  description       = "cert manager in k8s"
}

################################################################################
# control-plane
# resource name: tf_k8s
################################################################################

resource "openstack_networking_floatingip_v2" "tf_k8s" {
  pool = var.pool
}

resource "openstack_compute_instance_v2" "tf_k8s" {
  name            = "${var.name}-control-plane"
  image_name      = var.image
  flavor_name     = var.flavor
  key_pair        = openstack_compute_keypair_v2.tf_k8s.name
  security_groups = ["${openstack_networking_secgroup_v2.tf_k8s.name}"]

  network {
    uuid        = openstack_networking_network_v2.tf_k8s.id
    fixed_ip_v4 = var.control_plane_private_ip
  }
}

resource "openstack_compute_floatingip_associate_v2" "tf_k8s" {
  floating_ip = openstack_networking_floatingip_v2.tf_k8s.address
  instance_id = openstack_compute_instance_v2.tf_k8s.id

  connection {
    host        = openstack_networking_floatingip_v2.tf_k8s.address
    user        = var.ssh_user_name
    private_key = file(var.ssh_key_file)
  }

  provisioner "file" {
    source      = "kubeadm.sh"
    destination = "/tmp/kubeadm.sh"
  }

  provisioner "remote-exec" {
    inline = [
      "chmod +x /tmp/kubeadm.sh",
      "/tmp/kubeadm.sh",
    ]
  }

  depends_on = [
    openstack_networking_floatingip_v2.tf_k8s,
    openstack_compute_instance_v2.tf_k8s
  ]
}

################################################################################
# worker node
# resource name: worker_node
################################################################################

resource "openstack_compute_instance_v2" "worker_node" {
  count           = var.worker_node_count
  name            = format("${var.name}-${var.worker_node_prefix}-%02d", count.index + 1)
  image_name      = var.image
  flavor_name     = var.flavor
  key_pair        = openstack_compute_keypair_v2.tf_k8s.name
  security_groups = ["${openstack_networking_secgroup_v2.tf_k8s.name}"]

  network {
    uuid = openstack_networking_network_v2.tf_k8s.id
  }

  depends_on = [openstack_compute_floatingip_associate_v2.tf_k8s]
}

resource "openstack_networking_floatingip_v2" "worker_node" {
  count = var.worker_node_count
  pool  = var.pool
}

resource "openstack_compute_floatingip_associate_v2" "worker_node" {
  count       = var.worker_node_count
  floating_ip = openstack_networking_floatingip_v2.worker_node.*.address[count.index]
  instance_id = openstack_compute_instance_v2.worker_node.*.id[count.index]

  connection {
    host        = openstack_networking_floatingip_v2.worker_node.*.address[count.index]
    user        = var.ssh_user_name
    private_key = file(var.ssh_key_file)
  }

  provisioner "file" {
    source      = "worker_node.sh"
    destination = "/tmp/worker_node.sh"
  }

  provisioner "remote-exec" {
    inline = [
      "chmod +x /tmp/worker_node.sh",
      "/tmp/worker_node.sh ${data.openstack_compute_instance_v2.tf_k8s.access_ip_v4}",
    ]
  }

  depends_on = [
    openstack_networking_floatingip_v2.worker_node,
    openstack_compute_instance_v2.worker_node
  ]
}

################################################################################
# kubernetes resources
# resource name: tf_k8s_resource
################################################################################

resource "null_resource" "tf_k8s_resource" {

  connection {
    host        = openstack_networking_floatingip_v2.tf_k8s.address
    user        = var.ssh_user_name
    private_key = file(var.ssh_key_file)
  }

  provisioner "file" {
    source      = "k8s_resource.sh"
    destination = "/tmp/k8s_resource.sh"
  }

  provisioner "remote-exec" {
    inline = [
      "chmod +x /tmp/k8s_resource.sh",
      "/tmp/k8s_resource.sh",
    ]
  }

  depends_on = [
    openstack_compute_floatingip_associate_v2.tf_k8s,
    openstack_compute_floatingip_associate_v2.worker_node
  ]
}
